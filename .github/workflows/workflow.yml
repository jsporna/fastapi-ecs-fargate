---
name: "workflow"

'on':
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  python:
    name: "Python CI"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: "Install pipenv"
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: "Install dependencies"
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev

      - name: "Run tests"
        run: |
          pipenv run pytest --cov-report=term-missing --cov=app tests/ --color=yes

      - name: "Run linter"
        run: |
          pipenv run pylint app/
        continue-on-error: true

  docker:
    name: "Docker CI"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: "Run linter"
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: Dockerfile
          ignore: SC1091

  terraform:
    name: "Terraform CI"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: "Setup terraform"
        uses: hashicorp/setup-terraform@v1

      - name: "Terraform fmt"
        id: fmt
        run: terraform fmt -check -recursive iac/
        continue-on-error: true

  aws-cd:
    name: "AWS CD"
    runs-on: "ubuntu-latest"
    needs:
      - python
      - docker
      - terraform
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - id: vars
        run: |
          echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: "Build, tag, and push image to Amazon ECR"
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: "Download task definition"
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_SERVICE }} \
          --query taskDefinition > task-definition.json

      - name: "Fill in the new image tag in the Amazon ECS task definition"
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.ECS_COINTAINER }}
          image: ${{ steps.build-image.outputs.image }}

      - name: "Deploy Amazon ECS task definition"
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true